{"ast":null,"code":"import _toConsumableArray from \"E:/React.js-To-Do-List-main/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"E:/React.js-To-Do-List-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"E:/React.js-To-Do-List-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"E:\\\\React.js-To-Do-List-main\\\\src\\\\components\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"E:\\\\React.js-To-Do-List-main\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { saveAs } from \"file-saver\";\nimport Chart from \"chart.js/auto\";\n\nfunction App() {\n  _s();\n\n  var _useState = useState(\"CLICK ME PLEASE\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      title = _useState2[0],\n      setTitle = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      histogramData = _useState4[0],\n      setHistogramData = _useState4[1];\n\n  var canvasRef = useRef(null);\n  useEffect(function () {\n    if (histogramData && canvasRef.current) {\n      var ctx = canvasRef.current.getContext(\"2d\");\n      new Chart(ctx, {\n        type: \"bar\",\n        data: histogramData,\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true,\n              precision: 0\n            }\n          }\n        }\n      });\n    }\n  }, [histogramData]);\n\n  var fetchData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, textContent, words, wordFrequencyMap, sortedWords, topWords, frequencyData, chartData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.get(\"https://www.terriblytinytales.com/test.txt\");\n\n            case 3:\n              response = _context.sent;\n              textContent = response.data;\n              words = textContent.split(/\\s+/);\n              wordFrequencyMap = {};\n              words.forEach(function (word) {\n                if (wordFrequencyMap[word]) {\n                  wordFrequencyMap[word] += 1;\n                } else {\n                  wordFrequencyMap[word] = 1;\n                }\n              });\n              sortedWords = Object.keys(wordFrequencyMap).sort(function (a, b) {\n                return wordFrequencyMap[b] - wordFrequencyMap[a];\n              });\n              topWords = sortedWords.slice(0, 20);\n              frequencyData = topWords.map(function (word) {\n                return wordFrequencyMap[word];\n              });\n              chartData = {\n                labels: topWords,\n                datasets: [{\n                  label: \"Word Frequency\",\n                  data: frequencyData,\n                  backgroundColor: \"rgba(75,192,192,0.6)\"\n                }]\n              };\n              setTitle(\"HISTOGRAM ACCORDING TO FREQUENCEY\");\n              setHistogramData(chartData);\n              _context.next = 19;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(\"Error fetching data:\", _context.t0);\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 16]]);\n    }));\n\n    return function fetchData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var exportData = function exportData() {\n    if (!histogramData) {\n      console.error(\"No histogram data available\");\n      return;\n    }\n\n    var csvContent = [[\"Word\", \"Frequency\"]].concat(_toConsumableArray(histogramData.labels.map(function (word, index) {\n      return [word, histogramData.datasets[0].data[index]];\n    }))).map(function (row) {\n      return row.join(\",\");\n    }).join(\"\\n\");\n    var blob = new Blob([csvContent], {\n      type: \"text/csv;charset=utf-8\"\n    });\n    saveAs(blob, \"word_frequency.csv\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, title), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, \"Submit\"), histogramData && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: exportData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, \"Export\")));\n}\n\n_s(App, \"8Fvj8Lq909ZiYpqrTCYevDNkCiE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","saveAs","Chart","App","title","setTitle","histogramData","setHistogramData","canvasRef","current","ctx","getContext","type","data","options","scales","y","beginAtZero","precision","fetchData","get","response","textContent","words","split","wordFrequencyMap","forEach","word","sortedWords","Object","keys","sort","a","b","topWords","slice","frequencyData","map","chartData","labels","datasets","label","backgroundColor","console","error","exportData","csvContent","index","row","join","blob","Blob"],"sources":["E:/React.js-To-Do-List-main/src/components/App.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { saveAs } from \"file-saver\";\nimport Chart from \"chart.js/auto\";\n\nfunction App() {\n  const [title, setTitle] = useState(\"CLICK ME PLEASE\");\n  const [histogramData, setHistogramData] = useState(null);\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    if (histogramData && canvasRef.current) {\n      const ctx = canvasRef.current.getContext(\"2d\");\n      new Chart(ctx, {\n        type: \"bar\",\n        data: histogramData,\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true,\n              precision: 0\n            }\n          }\n        }\n      });\n    }\n  }, [histogramData]);\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\n        \"https://www.terriblytinytales.com/test.txt\"\n      );\n      const textContent = response.data;\n      const words = textContent.split(/\\s+/);\n\n      const wordFrequencyMap = {};\n      words.forEach((word) => {\n        if (wordFrequencyMap[word]) {\n          wordFrequencyMap[word] += 1;\n        } else {\n          wordFrequencyMap[word] = 1;\n        }\n      });\n\n      const sortedWords = Object.keys(wordFrequencyMap).sort(\n        (a, b) => wordFrequencyMap[b] - wordFrequencyMap[a]\n      );\n\n      const topWords = sortedWords.slice(0, 20);\n      const frequencyData = topWords.map((word) => wordFrequencyMap[word]);\n\n      const chartData = {\n        labels: topWords,\n        datasets: [\n          {\n            label: \"Word Frequency\",\n            data: frequencyData,\n            backgroundColor: \"rgba(75,192,192,0.6)\"\n          }\n        ]\n      };\n      setTitle(\"HISTOGRAM ACCORDING TO FREQUENCEY\");\n      setHistogramData(chartData);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  const exportData = () => {\n    if (!histogramData) {\n      console.error(\"No histogram data available\");\n      return;\n    }\n\n    const csvContent = [\n      [\"Word\", \"Frequency\"],\n      ...histogramData.labels.map((word, index) => [\n        word,\n        histogramData.datasets[0].data[index]\n      ])\n    ]\n      .map((row) => row.join(\",\"))\n      .join(\"\\n\");\n\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8\" });\n    saveAs(blob, \"word_frequency.csv\");\n  };\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      <button onClick={fetchData}>Submit</button>\n      {histogramData && (\n        <div>\n          <canvas ref={canvasRef} />\n          <button onClick={exportData}>Export</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}